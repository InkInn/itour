{"version":3,"file":"tree.js","sourceRoot":"","sources":["tree.ts"],"names":[],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,AfterContentInit,Output,EventEmitter,OnInit,OnDestroy,EmbeddedViewRef,ViewContainerRef,ContentChildren,QueryList,TemplateRef,Inject,forwardRef,Host\n} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {TreeNode} from '../common/api';\nimport {SharedModule} from '../common/shared';\nimport {PrimeTemplate} from '../common/shared';\n\n@Component({\n    selector: 'p-treeNodeTemplateLoader',\n    template: ``\n})\nexport class TreeNodeTemplateLoader implements OnInit, OnDestroy {\n        \n    @Input() node: any;\n    \n    @Input() template: TemplateRef<any>;\n    \n    view: EmbeddedViewRef<any>;\n        \n    constructor(public viewContainer: ViewContainerRef) {}\n    \n    ngOnInit() {\n        this.view = this.viewContainer.createEmbeddedView(this.template, {\n            '\\$implicit': this.node\n        });\n    }\n    \n    ngOnDestroy() {\n        this.view.destroy();\n    }\n}\n\n@Component({\n    selector: 'p-treeNode',\n    template: `\n        <template [ngIf]=\"node\">\n            <li class=\"ui-treenode {{node.styleClass}}\" *ngIf=\"!tree.horizontal\" [ngClass]=\"{'ui-treenode-leaf': isLeaf()}\">\n                <div class=\"ui-treenode-content\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\" (touchend)=\"onNodeTouchEnd()\"\n                    [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode}\">\n                    <span class=\"ui-tree-toggler  fa fa-fw\" [ngClass]=\"{'fa-caret-right':!node.expanded,'fa-caret-down':node.expanded}\"\n                            (click)=\"toggle($event)\"></span\n                    ><div class=\"ui-chkbox\" *ngIf=\"tree.selectionMode == 'checkbox'\"><div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\">\n                        <span class=\"ui-chkbox-icon ui-c fa\" \n                            [ngClass]=\"{'fa-check':isSelected(),'fa-minus':node.partialSelected}\"></span></div></div\n                    ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                    ><span class=\"ui-treenode-label ui-corner-all\" \n                        [ngClass]=\"{'ui-state-highlight':isSelected()}\">\n                            <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                            <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\n                            </span>\n                    </span>\n                </div>\n                <ul class=\"ui-treenode-children\" style=\"display: none;\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'block' : 'none'\">\n                    <p-treeNode *ngFor=\"let childNode of node.children\" [node]=\"childNode\" [parentNode]=\"node\"></p-treeNode>\n                </ul>\n            </li>\n            <table *ngIf=\"tree.horizontal\">\n                <tbody>\n                    <tr>\n                        <td class=\"ui-treenode-connector\" *ngIf=\"!root\">\n                            <table class=\"ui-treenode-connector-table\">\n                                <tbody>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!firstChild}\"></td>\n                                    </tr>\n                                    <tr>\n                                        <td [ngClass]=\"{'ui-treenode-connector-line':!lastChild}\"></td>\n                                    </tr>\n                                </tbody>\n                            </table>\n                        </td>\n                        <td class=\"ui-treenode\" [ngClass]=\"{'ui-treenode-collapsed':!node.expanded}\">\n                            <div class=\"ui-treenode-content ui-state-default ui-corner-all\" \n                                [ngClass]=\"{'ui-treenode-selectable':tree.selectionMode,'ui-state-highlight':isSelected()}\" (click)=\"onNodeClick($event)\" (contextmenu)=\"onNodeRightClick($event)\"\n                                (touchend)=\"onNodeTouchEnd()\">\n                                <span class=\"ui-tree-toggler fa fa-fw\" [ngClass]=\"{'fa-plus':!node.expanded,'fa-minus':node.expanded}\" *ngIf=\"!isLeaf()\"\n                                        (click)=\"toggle($event)\"></span\n                                ><span [class]=\"getIcon()\" *ngIf=\"node.icon||node.expandedIcon||node.collapsedIcon\"></span\n                                ><span class=\"ui-treenode-label ui-corner-all\">\n                                        <span *ngIf=\"!tree.getTemplateForNode(node)\">{{node.label}}</span>\n                                        <span *ngIf=\"tree.getTemplateForNode(node)\">\n                                            <p-treeNodeTemplateLoader [node]=\"node\" [template]=\"tree.getTemplateForNode(node)\"></p-treeNodeTemplateLoader>\n                                        </span>\n                                </span>\n                            </div>\n                        </td>\n                        <td class=\"ui-treenode-children-container\" *ngIf=\"node.children && node.expanded\" [style.display]=\"node.expanded ? 'table-cell' : 'none'\">\n                            <div class=\"ui-treenode-children\">\n                                <p-treeNode *ngFor=\"let childNode of node.children;let firstChild=first;let lastChild=last;\" [node]=\"childNode\" \n                                        [firstChild]=\"firstChild\" [lastChild]=\"lastChild\"></p-treeNode>\n                            </div>\n                        </td>\n                    </tr>\n                </tbody>\n            </table>\n        </template>\n    `\n})\nexport class UITreeNode implements OnInit {\n\n    static ICON_CLASS: string = 'ui-treenode-icon fa fa-fw';\n\n    @Input() node: TreeNode;\n    \n    @Input() parentNode: TreeNode;\n    \n    @Input() root: boolean;\n    \n    @Input() firstChild: boolean;\n    \n    @Input() lastChild: boolean;\n        \n    constructor(@Inject(forwardRef(() => Tree)) public tree:Tree) {}\n    \n    ngOnInit() {\n        this.node.parent = this.parentNode;\n    }\n        \n    getIcon() {\n        let icon: string;\n        \n        if(this.node.icon)\n            icon = this.node.icon;\n        else\n            icon = this.node.expanded ? this.node.expandedIcon : this.node.collapsedIcon;\n        \n        return UITreeNode.ICON_CLASS + ' ' + icon;\n    }\n    \n    isLeaf() {\n        return this.node.leaf == false ? false : !(this.node.children&&this.node.children.length);\n    }\n    \n    toggle(event: Event) {\n        if(this.node.expanded)\n            this.tree.onNodeCollapse.emit({originalEvent: event, node: this.node});\n        else\n            this.tree.onNodeExpand.emit({originalEvent: event, node: this.node});\n\n        this.node.expanded = !this.node.expanded\n    }\n    \n    onNodeClick(event: MouseEvent) {\n        this.tree.onNodeClick(event, this.node);\n    }\n    \n    onNodeTouchEnd() {\n        this.tree.onNodeTouchEnd();\n    }\n    \n    onNodeRightClick(event: MouseEvent) {\n        this.tree.onNodeRightClick(event, this.node);\n    }\n    \n    isSelected() {\n        return this.tree.isSelected(this.node);\n    }\n}\n\n@Component({\n    selector: 'p-tree',\n    template: `\n        <div [ngClass]=\"{'ui-tree ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\" [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"!horizontal\">\n            <ul class=\"ui-tree-container\">\n                <p-treeNode *ngFor=\"let node of value\" [node]=\"node\"></p-treeNode>\n            </ul>\n        </div>\n        <div [ngClass]=\"{'ui-tree ui-tree-horizontal ui-widget ui-widget-content ui-corner-all':true,'ui-tree-selectable':selectionMode}\"  [ngStyle]=\"style\" [class]=\"styleClass\" *ngIf=\"horizontal\">\n            <table *ngIf=\"value&&value[0]\">\n                <p-treeNode [node]=\"value[0]\" [root]=\"true\"></p-treeNode>\n            </table>\n        </div>\n    `\n})\nexport class Tree implements AfterContentInit {\n\n    @Input() value: TreeNode[];\n        \n    @Input() selectionMode: string;\n    \n    @Input() selection: any;\n    \n    @Output() selectionChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeUnselect: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeExpand: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeCollapse: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onNodeContextMenuSelect: EventEmitter<any> = new EventEmitter();\n    \n    @Input() style: any;\n        \n    @Input() styleClass: string;\n    \n    @Input() contextMenu: any;\n    \n    @Input() layout: string = 'vertical';\n    \n    @Input() metaKeySelection: boolean = true;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    public templateMap: any;\n    \n    public nodeTouched: boolean;\n    \n    get horizontal(): boolean {\n        return this.layout == 'horizontal';\n    }\n    \n    ngAfterContentInit() {\n        if(this.templates.length) {\n            this.templateMap = {};\n        }\n        \n        this.templates.forEach((item) => {\n            this.templateMap[item.getType()] = item.template;\n        });\n    }\n         \n    onNodeClick(event: MouseEvent, node: TreeNode) {\n        let eventTarget = (<Element> event.target);\n        \n        if(eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n            return;\n        }\n        else {\n            let index = this.findIndexInSelection(node);\n            let selected = (index >= 0);\n                   \n            if(this.isCheckboxSelectionMode()) {\n                if(selected) {\n                    this.propagateSelectionDown(node, false);\n                    if(node.parent) {\n                        this.propagateSelectionUp(node.parent, false);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeUnselect.emit({originalEvent: event, node: node});\n                }\n                else {\n                    this.propagateSelectionDown(node, true);\n                    if(node.parent) {\n                        this.propagateSelectionUp(node.parent, true);\n                    }\n                    this.selectionChange.emit(this.selection);\n                    this.onNodeSelect.emit({originalEvent: event, node: node});\n                }\n            }\n            else {\n                let metaSelection = this.nodeTouched ? false : this.metaKeySelection;\n                \n                if(metaSelection) {\n                    let metaKey = (event.metaKey||event.ctrlKey);\n                    \n                    if(selected && metaKey) {\n                        if(this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(null);\n                        }\n                        else {\n                            this.selection.splice(index,1);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeUnselect.emit({originalEvent: event, node: node});\n                    }\n                    else {\n                        if(this.isSingleSelectionMode()) {\n                            this.selectionChange.emit(node);\n                        }\n                        else if(this.isMultipleSelectionMode()) {\n                            this.selection = (!metaKey) ? [] : this.selection||[];\n                            this.selection.push(node);\n                            this.selectionChange.emit(this.selection);\n                        }\n\n                        this.onNodeSelect.emit({originalEvent: event, node: node});\n                    }\n                }\n                else {\n                    if(this.isSingleSelectionMode()) {\n                        if(selected) {\n                            this.selection = null;\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = node;\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n                    else {\n                        if(selected) {\n                            this.selection.splice(index,1);\n                            this.onNodeUnselect.emit({originalEvent: event, node: node});\n                        }\n                        else {\n                            this.selection = this.selection||[];\n                            this.selection.push(node);\n                            this.onNodeSelect.emit({originalEvent: event, node: node});\n                        }\n                    }\n                    \n                    this.selectionChange.emit(this.selection);\n                }\n            }\n        }\n        \n        this.nodeTouched = false;\n    }\n    \n    onNodeTouchEnd() {\n        this.nodeTouched = true;\n    }\n    \n    onNodeRightClick(event: MouseEvent, node: TreeNode) {\n        if(this.contextMenu) {\n            let eventTarget = (<Element> event.target);\n            \n            if(eventTarget.className && eventTarget.className.indexOf('ui-tree-toggler') === 0) {\n                return;\n            }\n            else {\n                let index = this.findIndexInSelection(node);\n                let selected = (index >= 0);\n                \n                if(!selected) {\n                    if(this.isSingleSelectionMode())\n                        this.selectionChange.emit(node);\n                    else\n                        this.selectionChange.emit([node]);\n                }\n                   \n                this.contextMenu.show(event);\n                this.onNodeContextMenuSelect.emit({originalEvent: event, node: node});\n            }\n        }\n    }\n    \n    findIndexInSelection(node: TreeNode) {\n        let index: number = -1;\n\n        if(this.selectionMode && this.selection) {\n            if(this.isSingleSelectionMode()) {\n                index = (this.selection == node) ? 0 : - 1;\n            }\n            else {\n                for(let i = 0; i  < this.selection.length; i++) {\n                    if(this.selection[i] == node) {\n                        index = i;\n                        break;\n                    }\n                }\n            }\n        }\n\n        return index;\n    }\n    \n    propagateSelectionUp(node: TreeNode, select: boolean) {\n        if(node.children && node.children.length) {\n            let selectedCount: number = 0;\n            let childPartialSelected: boolean = false;\n            for(let child of node.children) {\n                if(this.isSelected(child)) {\n                    selectedCount++;\n                }\n                else if(child.partialSelected) {\n                    childPartialSelected = true;\n                }\n            }\n            \n            if(select && selectedCount == node.children.length) {\n                this.selection = this.selection||[];\n                this.selection.push(node);\n                node.partialSelected = false;\n            }\n            else {                \n                if(!select) {\n                    let index = this.findIndexInSelection(node);\n                    if(index >= 0) {\n                        this.selection.splice(index, 1);\n                    }\n                }\n                \n                if(childPartialSelected || selectedCount > 0 && selectedCount != node.children.length)\n                    node.partialSelected = true;\n                else\n                    node.partialSelected = false;\n            }\n        }\n                \n        let parent = node.parent;\n        if(parent) {\n            this.propagateSelectionUp(parent, select);\n        }\n    }\n    \n    propagateSelectionDown(node: TreeNode, select: boolean) {\n        let index = this.findIndexInSelection(node);\n        \n        if(select && index == -1) {\n            this.selection = this.selection||[];\n            this.selection.push(node);\n        }\n        else if(!select && index > -1) {\n            this.selection.splice(index, 1);\n        }\n        \n        node.partialSelected = false;\n        \n        if(node.children && node.children.length) {\n            for(let child of node.children) {\n                this.propagateSelectionDown(child, select);\n            }\n        }\n    }\n    \n    isSelected(node: TreeNode) {\n        return this.findIndexInSelection(node) != -1;         \n    }\n    \n    isSingleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'single';\n    }\n    \n    isMultipleSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'multiple';\n    }\n    \n    isCheckboxSelectionMode() {\n        return this.selectionMode && this.selectionMode == 'checkbox';\n    }\n\n    getTemplateForNode(node: TreeNode): TemplateRef<any> {\n        if(this.templateMap)\n            return node.type ? this.templateMap[node.type] : this.templateMap['default'];\n        else\n            return null;\n    }\n}\n@NgModule({\n    imports: [CommonModule],\n    exports: [Tree,SharedModule],\n    declarations: [Tree,UITreeNode,TreeNodeTemplateLoader]\n})\nexport class TreeModule { }\n"]}